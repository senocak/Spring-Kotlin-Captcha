### Spring-Kotlin-Captcha API Tests

### Variables
@baseUrl = http://localhost:8081

### Get Captcha Configuration
# Returns the current captcha configuration (type and difficulty)
GET {{baseUrl}}/captcha/config
Accept: application/json

### Generate Captcha Image and store the response
# Generates a new CAPTCHA image and returns it with a token in the header
# The token is returned in the X-Captcha-Token header
# @name captchaResponse
GET {{baseUrl}}/captcha/image
Accept: image/png

> {%
    client.global.set("captchaToken", response.headers.valueOf("X-Captcha-Token"))
 %}

### Generate Captcha Image with parameters
# Generates a new CAPTCHA image with specified type, difficulty, and background image
# The token is returned in the X-Captcha-Token header
# @name captchaResponseWithParams
GET {{baseUrl}}/captcha/image?captchaType=MATH&difficultyLevel=HARD&useBackgroundImage=true
Accept: image/png

> {%
    client.global.set("captchaTokenWithParams", response.headers.valueOf("X-Captcha-Token"))
 %}

### Validate Captcha
# Validates a CAPTCHA input against the token
# Replace 'your-captcha-answer' with the actual answer to the captcha
POST {{baseUrl}}/captcha/validate
Content-Type: application/x-www-form-urlencoded

captchaInput=13&token={{captchaToken}}

### Generate Text Captcha with parameters
# Generates a new text CAPTCHA image with specified difficulty and background image
# The token is returned in the X-Captcha-Token header
# @name textCaptchaResponse
GET {{baseUrl}}/captcha/text/image?difficultyLevel=EASY&useBackgroundImage=false
Accept: image/png

> {%
    client.global.set("textCaptchaToken", response.headers.valueOf("X-Captcha-Token"))
 %}

### Generate Math Captcha with parameters
# Generates a new math CAPTCHA image with specified difficulty and background image
# The token is returned in the X-Captcha-Token header
# @name mathCaptchaResponse
GET {{baseUrl}}/captcha/math/image?difficultyLevel=MEDIUM&useBackgroundImage=true
Accept: image/png

> {%
    client.global.set("mathCaptchaToken", response.headers.valueOf("X-Captcha-Token"))
 %}

### Generate Pattern Captcha with parameters
# Generates a new pattern CAPTCHA image with specified difficulty and background image
# The token is returned in the X-Captcha-Token header
# @name patternCaptchaResponse
GET {{baseUrl}}/captcha/pattern/image?difficultyLevel=HARD&useBackgroundImage=false
Accept: image/png

> {%
    client.global.set("patternCaptchaToken", response.headers.valueOf("X-Captcha-Token"))
 %}

### Generate Background Image Captcha with parameters
# Generates a new CAPTCHA image with a background image and specified difficulty
# The token is returned in the X-Captcha-Token header
# @name backgroundCaptchaResponse
GET {{baseUrl}}/captcha/background/image?difficultyLevel=MEDIUM
Accept: image/png

> {%
    client.global.set("backgroundCaptchaToken", response.headers.valueOf("X-Captcha-Token"))
 %}

### Generate Audio Captcha with parameters
# Generates a new audio CAPTCHA with specified type and difficulty
# The token is returned in the X-Captcha-Token header
# @name audioCaptchaResponse
GET {{baseUrl}}/captcha/audio?captchaType=TEXT&difficultyLevel=EASY
Accept: audio/wav

> {%
    client.global.set("audioCaptchaToken", response.headers.valueOf("X-Captcha-Token"))
 %}

### Generate Specific Audio Captcha with parameters
# Generates a new specific audio CAPTCHA with specified difficulty
# The token is returned in the X-Captcha-Token header
# @name specificAudioCaptchaResponse
GET {{baseUrl}}/captcha/audio/specific?difficultyLevel=MEDIUM
Accept: audio/wav

> {%
    client.global.set("specificAudioCaptchaToken", response.headers.valueOf("X-Captcha-Token"))
 %}

### Validate Captcha (for any of the above)
# Validates a CAPTCHA input against the token
# Replace 'your-captcha-answer' with the actual answer to the captcha
POST {{baseUrl}}/captcha/validate
Content-Type: application/x-www-form-urlencoded

captchaInput=your-captcha-answer&token={{backgroundCaptchaToken}}
